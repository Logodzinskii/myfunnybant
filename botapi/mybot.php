<?php


function myErrorHandler($errno, $errstr, $errfile, $errline)
{
    $writeLog = new LogWiriter();
    if (!(error_reporting() & $errno)) {
        // –≠—Ç–æ—Ç –∫–æ–¥ –æ—à–∏–±–∫–∏ –Ω–µ –≤–∫–ª—é—á—ë–Ω –≤ error_reporting,
        // —Ç–∞–∫ —á—Ç–æ –ø—É—Å—Ç—å –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–º –æ—à–∏–±–æ–∫ PHP
        return false;
    }

    // –º–æ–∂–µ—Ç –ø–æ—Ç—Ä–µ–±–æ–≤–∞—Ç—å—Å—è —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ $errstr:
    $errstr = htmlspecialchars($errstr);

    switch ($errno) {
        case E_USER_ERROR:
            $writeLog->writeLog($errstr);
            exit();

        case E_USER_WARNING:
            //echo "<div class='reportMessage1' style='display: block; width: 30vw; height: auto; border: solid 1px pink; background: pink; color: black;'>";

            $writeLog->writeLog($errstr);
            //echo "</b></div>";
            //echo "<b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ï</b> [$errno] $errstr<br />\n";
            break;

        case E_USER_NOTICE:
            //echo "<div class='reportMessage1' style='display: block; width: 30vw; height: auto; border: solid 1px pink; background: lightgreen; color: black;'>";
            $writeLog->writeLog($errstr);
            //echo "</b></div>";
            break;

        default:
            //echo "<div class='reportMessage1' style='display: block; width: 30vw; height: auto; border: solid 1px pink; background: pink; color: black;'>";
            $writeLog->writeLog($errstr);
            //echo "</b></div>";
            break;
    }

    /* –ù–µ –∑–∞–ø—É—Å–∫–∞–µ–º –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ PHP */
    return true;
}

set_error_handler("myErrorHandler");

require_once ('autoloader.php');

date_default_timezone_set('asia/yekaterinburg');


$arr = json_decode(file_get_contents('php://input'), TRUE);

file_put_contents('botUnswer.txt', json_encode($arr),FILE_APPEND | LOCK_EX);


$user = UserConfiguration::get_instance();
$user->verifyUser($arr);

file_put_contents('botUnswer.txt', json_encode($user->verifyUser($arr)),FILE_APPEND | LOCK_EX);

$bot = new Bot();

//$resVerify = $user->verifyUser();

//if($resVerify === 'denied'){
//    $bot->addAnonimUser();
//}

if(!empty($arr['callback_query']['data'])){

    $metodParametrs = explode('#', $arr['callback_query']['data']);//—Ä–∞–∑–¥–µ–ª–∏–º –¥–∞—Ç—É –Ω–∞ —á–∞—Å—Ç–∏ –≤ –ø–µ—Ä–≤–æ–π –Ω–∞–∑–≤–∞–Ω–∏–µ –º–µ—Ç–æ–¥–∞, –ø–æ—Å–ª–µ # –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –≤—ã–∑–æ–≤–∞ –º–µ—Ç–æ–¥–∞
    $writeLog = new LogWiriter();
    $writeLog->writeLog($arr['callback_query']['data'] . 'mybot.php str-73');
    $writeLog->writeLog($metodParametrs[0] . 'mybot.php str-74');

    switch ($metodParametrs[0]){
        case('updatestatus'):
            $parametrForMetod = explode('|', $metodParametrs[1]);
            try {
                //$user->verifyUser();
                if($parametrForMetod[0] == 'seller'){
                $user->updateStatusUser($parametrForMetod[0], $parametrForMetod[1]);
                //–æ—Ç–ø—Ä–∞–≤–∏–º –ø—Ä–æ–¥–∞–≤—Ü—É –Ω–æ–≤—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
                $data = [
                    [
                        ['text' => 'üíµ –ü—Ä–æ–¥–∞–∂–∏ –∑–∞ —Å–µ–≥–æ–¥–Ω—è –ø–æ –∞—Ä—Ç–∏–∫—É–ª—É'],
                        ['text' => 'üí∞ –ü—Ä–æ–¥–∞–∂–∏ –∑–∞ —Å–µ–≥–æ–¥–Ω—è –≤—Å–µ–≥–æ'],
                    ],
                    [
                        ['text' => 'üè™ –ó–∞–≤–µ—Ä—à–∏—Ç—å —Ä–∞–±–æ—Ç—É'],
                    ],
                ];
                $subject = '–î–ª—è –≤–Ω–µ—Å–µ–Ω–∏—è –ø—Ä–æ–¥–∞–∂ –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º, –Ω–∞–ø—Ä–∏–º–µ—Ä: 1, 200. –ì–¥–µ 1 - –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–¥–∞–Ω–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞ –Ω–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏, 200 - —Ü–µ–Ω–∞ –∑–∞ –µ–¥–∏–Ω–∏—Ü—É —Ç–æ–≤–∞—Ä–∞.';
                $bot->getKeyBoard($data, $subject, $parametrForMetod[1]);
                $bot->reply('–°—Ç–∞—Ç—É—Å –∏–∑–º–µ–Ω–µ–Ω:' . $parametrForMetod[1] . ' –Ω–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å: ' . $parametrForMetod[0], $bot->getManagerId());
                }elseif($parametrForMetod[0] == 'newseller'){
                $user->updateStatusUser($parametrForMetod[0], $parametrForMetod[1]);
                //–æ—Ç–ø—Ä–∞–≤–∏–º –ø—Ä–æ–¥–∞–≤—Ü—É –Ω–æ–≤—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
                $subject = '–î–æ –Ω–æ–≤—ã—Ö –≤—Å—Ç—Ä–µ—á!';
                        $data =
                            [
                                [
                                    ['text' => '/start'],
                                ],
                            ];
                $bot->getKeyBoard($data, $subject, $parametrForMetod[1]);
                $bot->reply('–°—Ç–∞—Ç—É—Å –∏–∑–º–µ–Ω–µ–Ω:' . $parametrForMetod[1] . ' –Ω–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å: ' . $parametrForMetod[0], $bot->getManagerId());
                }
            }catch (Exception $e){
                trigger_error('mybot.php' . $e->getMessage());
            }
        break;
        case('delSaleitems'):
            try {
                //$user->verifyUser();
                $parametrForMetod = explode('|', $metodParametrs[1]);

                     $bot->delSaleItems($parametrForMetod[1], $arr['callback_query']['message']['chat']['id']);
                     //$arr['callback_query']['message']['message_id']
                     //$bot->reply('asdas', 645879928);
                     if($bot instanceof Bot){
                         $writeLog->writeLog('Bot - '.$parametrForMetod[1]);
                     }else{
                         $writeLog->writeLog('No Bot - '.$parametrForMetod[1]);
                     }

            }catch (Exception $e){
                trigger_error('CallBackQuery 45' . $e->getMessage());
            }
        break;
        case('updateCat'):
            //$user->verifyUser();
                $parametrForMetod = explode('|', $metodParametrs[1]);
            $bot->updateCat($parametrForMetod[0],$parametrForMetod[1], $arr['callback_query']['message']['chat']['id']);

            break;
        case('addSaleToAnotherSeller'):
            //$user->verifyUser();
            $parametrForMetod = explode('|', $metodParametrs[1]);
            $bot->addSaleToAnotherSeller($metodParametrs[1], $arr['callback_query']['message']['chat']['id']);
            break;
            case('insertSalesForSeller'):
                //$user->verifyUser();
                $parametrForMetod = explode('|', $metodParametrs[1]);
                $bot->insertSalesForSeller($parametrForMetod[0], $parametrForMetod[2], $arr['callback_query']['message']['chat']['id']);
                break;
                case('showReportAnonotherDay'):
                    //$user->verifyUser();
                    $parametrForMetod = explode('|', $metodParametrs[0]);
                    $report = new Report();
                    $bot->reply($report->sumAllSeller($arr['callback_query']['message']['chat']['id'], $metodParametrs[1]),$arr['callback_query']['message']['chat']['id']);
                    break;
        case('sumAllSellerByMonth'):
            $parametrForMetod = explode('|', $metodParametrs[0]);
            $report = new Report();
            $bot->reply($report->sumAllSellerByMonth($metodParametrs[1]),$arr['callback_query']['message']['chat']['id']);
            break;

    }
    exit();

}elseif(!empty($arr['message']['text'])){
    try{
        //$user->verifyUser();
        $bot->executeCommandUser($arr['message']['text']);
        $writeLog = new LogWiriter();
        $writeLog->writeLog($arr['message']['text']);
    }catch (Exception $e){
        trigger_error('myBot: 134' . $e->getMessage());
    }

    exit();
}elseif (!empty($arr['message']['photo'])){
    try{
        //$user->verifyUser();

        $image = new ProcessingImage($arr['message']['photo'], $arr['message']['caption'], $bot);
        $image->writeAndSaveImageSalesToDb();

        //$bot->sendButtons($arr['message']['chat']['id'], $image->writeAndSaveImageSalesToDb(), '–ó–∞–ø–∏—Å—å –≤–Ω–µ—Å–µ–Ω–∞');

        $writeLog = new LogWiriter();
        $writeLog->writeLog($arr['message']['caption']);
    }catch (Exception $e){
        trigger_error('myBot: 151' . $e->getMessage());
    }

    }else{

    $writeLog = new LogWiriter();
    $writeLog->writeLog('–ù–∏—á–µ–≥–æ –Ω–µ –ø—Ä–∏—à–ª–æ');
    exit();
}
